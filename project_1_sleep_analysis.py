# -*- coding: utf-8 -*-
"""Project_1_Sleep_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dv_M5FIuUQXgd7m0uy4QwCmsxbsLgrCb
"""

#import libraries
import pandas as pd
import matplotlib.pyplot as plt
from datetime import time
import numpy as np

#load dataset with proper encoding
df = pd.read_csv("all_history_data.csv", encoding="ISO-8859-1")

#convert Visit Time column to datetime format
df["Visit Time"] = pd.to_datetime(df["Visit Time"], errors="coerce", format="%m/%d/%Y  %I:%M:%S %p")

#convert Visit Duration column to timedelta format
df["Visit Duration"] = pd.to_timedelta(df["Visit Duration"], errors="coerce")

#fill missing Visit Duration values with 0
df["Visit Duration"] = df["Visit Duration"].fillna(pd.Timedelta(seconds=0))

#create new dataframe with extracted columns, remove 0 days, and calculate the end time
processed_df = pd.DataFrame()
processed_df["Date"] = df["Visit Time"].dt.date
processed_df["Time Visited"] = df["Visit Time"].dt.time
processed_df["Duration"] = df["Visit Duration"].astype(str).str.replace("0 days ", "", regex=False)
processed_df["Time End"] = (df["Visit Time"] + df["Visit Duration"]).dt.time

#shhow the first few rows
print(processed_df.head())

#find first and last visit of each day
first_visit = processed_df.groupby("Date")["Time Visited"].min().reset_index()
last_visit = processed_df.groupby("Date")["Time End"].max().reset_index()

#merge first and last visit times to track daily browsing activity
sleep_df = pd.merge(first_visit, last_visit, on="Date", how="inner")

#rename columns to make clearer
sleep_df.rename(columns={"Time Visited": "First Visit", "Time End": "Last Visit"}, inplace=True)

#convert Date and Times to full datetime format
sleep_df["Date"] = pd.to_datetime(sleep_df["Date"])

#use format=mixed to handle different time formats
sleep_df["First Visit"] = pd.to_datetime(
    sleep_df["Date"].astype(str) + " " + sleep_df["First Visit"].astype(str),
    format="mixed",
    errors="coerce"
)
sleep_df["Last Visit"] = pd.to_datetime(
    sleep_df["Date"].astype(str) + " " + sleep_df["Last Visit"].astype(str),
    format="mixed",
    errors="coerce"
)

#shift Last Visit to get the previous day's last activity
sleep_df["Previous Day Last Visit"] = sleep_df["Last Visit"].shift(1)

#identify and remove unrealistic times
#set threshold for maximum gap between visits to 16 hours
max_valid_gap = pd.Timedelta(hours=16)
sleep_df = sleep_df[(sleep_df["First Visit"] - sleep_df["Previous Day Last Visit"]) < max_valid_gap]

#function to determine sleep duration correctly
#if Last Visit of the same day is before First Visit thenSleep is between Last Visit and First Visit
#otherwise sleep is between Last Visit (previous day) and First Visit (current day)
def calculate_sleep(last_visit, first_visit, prev_last_visit):
    try:
        if prev_last_visit is not None and pd.notna(prev_last_visit):
            sleep_start = prev_last_visit
        else:
            sleep_start = last_visit

        sleep_duration = (first_visit - sleep_start).total_seconds() / 3600
        return sleep_duration if sleep_duration > 0 else None

    except Exception as e:
        return None

#apply function to calculate sleep duration
sleep_df["Sleep Duration"] = sleep_df.apply(lambda row: calculate_sleep(row["Last Visit"], row["First Visit"], row["Previous Day Last Visit"]), axis=1)

#remove negative values and extreme values
sleep_df = sleep_df.dropna()

#show the dataframe
from IPython.display import display
display(sleep_df)

#create new DataFrame with only Date and Sleep Duration
date_sleep_df = sleep_df[["Date", "Sleep Duration"]].copy()

#show dataframe
display(date_sleep_df)

#find the number of values in the sleep duration values
print(len(sleep_df["Sleep Duration"]))

#create plot of slep duration over time with line with my desired sleep amount
plt.figure(figsize=(12, 6))
plt.plot(date_sleep_df["Date"], date_sleep_df["Sleep Duration"], marker='o', linestyle='-', label='Sleep Duration')
plt.axhline(y=7, color='r', linestyle='--', label='Desired Sleep (7 hours)')
plt.xlabel("Date")
plt.ylabel("Sleep Duration (hours)")
plt.title("Sleep Duration Over Time")
plt.grid(True)
plt.xticks(rotation=45, ha="right")
plt.legend()
plt.tight_layout()
plt.show()

#bar graph of distribution of sleep duration
date_sleep_df = date_sleep_df.dropna(subset=["Sleep Duration"])
date_sleep_df["Sleep Duration"] = pd.to_numeric(date_sleep_df["Sleep Duration"], errors="coerce")
bins = [0, 4, 6, 8, 10, float('inf')]
labels = ['<4 hours', '4-6 hours', '6-8 hours', '8-10 hours', '>10 hours']
date_sleep_df['Duration Category'] = pd.cut(date_sleep_df['Sleep Duration'], bins=bins, labels=labels, right=False)
duration_counts = date_sleep_df['Duration Category'].value_counts().reindex(labels, fill_value=0)

plt.figure(figsize=(10, 6))
bars = plt.bar(duration_counts.index, duration_counts.values)
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(), str(int(bar.get_height())), ha='center', va='bottom')
plt.xlabel("Duration Category")
plt.ylabel("Number of Days")
plt.title("Distribution of Sleep Duration")
plt.grid(axis='y', linestyle='--')
plt.show()

#bar graph of average sleep duration per day of week
sleep_df['Date'] = pd.to_datetime(sleep_df['Date'])
sleep_df = sleep_df.dropna(subset=["Sleep Duration"])
sleep_df["Sleep Duration"] = pd.to_numeric(sleep_df["Sleep Duration"], errors="coerce")
sleep_df['DayOfWeek'] = sleep_df['Date'].dt.dayofweek
day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
sleep_df['DayOfWeek'] = sleep_df['DayOfWeek'].map(lambda x: day_names[x])
avg_sleep_by_day = sleep_df.groupby('DayOfWeek')['Sleep Duration'].mean().reindex(day_names, fill_value=0)

plt.figure(figsize=(10, 6))
bars = plt.bar(avg_sleep_by_day.index, avg_sleep_by_day.values)
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(), f"{bar.get_height():.1f}", ha='center', va='bottom')
plt.xlabel("Day of the Week")
plt.ylabel("Average Sleep Duration (hours)")
plt.title("Average Sleep Duration by Day of the Week")
plt.grid(axis='y', linestyle='--')
plt.show()

#calculate average sleep duration for semester
date_sleep_df["Date"] = pd.to_datetime(date_sleep_df["Date"], errors="coerce")
date_sleep_df = date_sleep_df.dropna(subset=["Sleep Duration"])
date_sleep_df["Sleep Duration"] = pd.to_numeric(date_sleep_df["Sleep Duration"], errors="coerce")
start_date = pd.to_datetime("2025-01-13")
end_date = pd.to_datetime("2025-02-23")
semester_sleep = date_sleep_df[(date_sleep_df["Date"] >= start_date) & (date_sleep_df["Date"] <= end_date)]
import IPython.display as disp
disp.display(semester_sleep)
print(f"Number of semester sleep entries: {len(semester_sleep)}")
if not semester_sleep.empty:
    average_semester_sleep = semester_sleep["Sleep Duration"].mean()
    print(f"Average Sleep Duration for the Semester (Jan 13 - Feb 23, 2025): {average_semester_sleep:.2f} hours")
else:
    print("No valid sleep data available for the semester period.")

#average sleep duration before semester
date_sleep_df["Date"] = pd.to_datetime(date_sleep_df["Date"], errors="coerce")
date_sleep_df = date_sleep_df.dropna(subset=["Sleep Duration"])
date_sleep_df["Sleep Duration"] = pd.to_numeric(date_sleep_df["Sleep Duration"], errors="coerce")
pre_semester_start_date = pd.to_datetime("2024-12-01")
pre_semester_end_date = pd.to_datetime("2025-01-12")
pre_semester_sleep = date_sleep_df[(date_sleep_df["Date"] >= pre_semester_start_date) & (date_sleep_df["Date"] <= pre_semester_end_date)]
import IPython.display as disp
disp.display(pre_semester_sleep)
num_entries = len(pre_semester_sleep)
print(f"Number of pre-semester sleep entries: {num_entries}")
if not pre_semester_sleep.empty:
    average_pre_semester_sleep = pre_semester_sleep["Sleep Duration"].mean()
    print(f"Average Sleep Duration Before Semester ({pre_semester_start_date.strftime('%Y-%m-%d')} - {pre_semester_end_date.strftime('%Y-%m-%d')}): {average_pre_semester_sleep:.2f} hours")
else:
    print("No valid sleep data available for days before semester.")

#average sleep start hour and wake hour
if "Last Visit" in sleep_df.columns and "First Visit" in sleep_df.columns:
    sleep_df["Sleep Start Hour"] = sleep_df["Last Visit"].dt.hour + (sleep_df["Last Visit"].dt.minute / 60)
    sleep_df["Wake Hour"] = sleep_df["First Visit"].dt.hour + (sleep_df["First Visit"].dt.minute / 60)
    sleep_df = sleep_df[(sleep_df["Sleep Start Hour"] >= 20) | (sleep_df["Sleep Start Hour"] <= 6)]
    sleep_df = sleep_df[(sleep_df["Wake Hour"] >= 4) & (sleep_df["Wake Hour"] <= 12)]
    sleep_df = sleep_df.dropna(subset=["Sleep Start Hour", "Wake Hour"])
    sleep_df["Sleep Start Hour"] = pd.to_numeric(sleep_df["Sleep Start Hour"], errors="coerce")
    sleep_df["Wake Hour"] = pd.to_numeric(sleep_df["Wake Hour"], errors="coerce")
    average_sleep_start_hour = sleep_df["Sleep Start Hour"].mean()
    average_wake_hour = sleep_df["Wake Hour"].mean()
    def convert_to_time(hour_decimal):
        if np.isnan(hour_decimal):
            return "No data available"
        hours = int(hour_decimal)
        minutes = int((hour_decimal - hours) * 60)
        return time(hours, minutes)

    average_sleep_start_time = convert_to_time(average_sleep_start_hour)
    average_wake_time = convert_to_time(average_wake_hour)
    print(f"Average Sleep Start Time: {average_sleep_start_time}")
    print(f"Average Wake Time: {average_wake_time}")

else:
    print("Required columns ('Last Visit', 'First Visit') are missing in sleep_df.")

#calculate standard deviation of sleep start and wake time
sleep_df = sleep_df.dropna(subset=["Sleep Start Hour", "Wake Hour"])
sleep_df["Sleep Start Hour"] = pd.to_numeric(sleep_df["Sleep Start Hour"], errors="coerce")
sleep_df["Wake Hour"] = pd.to_numeric(sleep_df["Wake Hour"], errors="coerce")
std_sleep_start = np.std(sleep_df["Sleep Start Hour"], ddof=1)
std_wake_time = np.std(sleep_df["Wake Hour"], ddof=1)
print(f"Standard Deviation of Sleep Start Times: {std_sleep_start:.2f} hours")
print(f"Standard Deviation of Wake Times: {std_wake_time:.2f} hours")